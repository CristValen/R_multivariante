data.dist1 <- vegdist(matriz1, "bray")
nmds.iso1 <- isoMDS(data.dist1, trace = FALSE)
nmds.iso1
matriz1<-symMat(monk_84$X1, diag = FALSE, byrow =TRUE, names = TRUE)
rownames(matriz1) <- c("ALFA","FRAN","FELL","PANC","ISA","GILD","BETI","OLGA","ORSE","ROSS","DIVO","CIST","ELET","EVA")
plot(nmds.iso1$points[,1], nmds.iso1$points[,2], type = "n",
xlab="NMDS1", ylab="NMDS2")
text(nmds.iso1$points[,1], nmds.iso1$points[,2], labels = rownames(matriz1), cex=0.8)
set.seed(123)
nmds.meta1 <- metaMDS(matriz1, distance="bray",engine = "monoMDS")
nmds.meta1$stress*100
plot(nmds.meta1, type="text")
set.seed(123)
library(MASS)
library(vegan)
data.dist2 <- vegdist(matriz2, "bray")
nmds.iso2 <- isoMDS(data.dist2, trace = FALSE)
nmds.iso2
matriz2<-symMat(monk_85$X1, diag = FALSE, byrow =TRUE, names = TRUE)
rownames(matriz2) <- c("ALFA","FRAN","FELL","PANC","ISA","GILD","BETI","OLGA","ORSE","ROSS","DIVO","CIST","ELET","EVA")
plot(nmds.iso2$points[,1], nmds.iso2$points[,2], type = "n",
xlab="NMDS1", ylab="NMDS2")
text(nmds.iso2$points[,1], nmds.iso2$points[,2], labels = rownames(matriz2), cex=0.8)
set.seed(123)
nmds.meta2 <- metaMDS(matriz2, distance="bray",engine = "monoMDS")
nmds.meta2$stress*100
plot(nmds.meta2, type="text")
plot(nmds.meta1, type = "text")
library(tidyverse)
library(ggrepel)
plot.nmds1<-as.data.frame(nmds.meta1$points)
plot.nmds1$sex = monkeys$sex
p1 <- ggplot(plot.nmds1, aes(plot.nmds1$MDS1, plot.nmds1$MDS2)) +
geom_point(color = 'red') +
theme_classic(base_size = 10)
p1 + geom_label_repel(aes(label = rownames(plot.nmds1),
fill = factor(plot.nmds1$sex)), color = 'white',
size = 3.5) +
theme(legend.position = "bottom")
plot.nmds2<-as.data.frame(nmds.meta2$points)
plot.nmds2$sex = monkeys$sex
plot.nmds2<-as.data.frame(nmds.meta2$points)
plot.nmds2$sex = monkeys$sex
p2 <- ggplot(plot.nmds2, aes(plot.nmds2$MDS1, plot.nmds2$MDS2)) +
geom_point(color = 'red') +
theme_classic(base_size = 10)
p2 + geom_label_repel(aes(label = rownames(plot.nmds2),
fill = factor(plot.nmds2$sex)), color = 'white',
size = 3.5) +
theme(legend.position = "bottom")
proce <- procrustes(nmds.meta1,nmds.meta2)
plot(proce)
proce
proce$X
proce$svd
proce$call
proce$xmean
proce$ss
proce$X
proce$Yrot
proce$ss
proce$rotation
proce$scale
proce$symmetric
proce$call
proce$svd
proce$X
load("C:/Users/Cristopher/Desktop/certificados/UOC/Bioestadistica y Bioinformatica/Analisis Multivariante/PEC1/gorriones.RData")
load("C:/Users/Cristopher/Desktop/certificados/UOC/Bioestadistica y Bioinformatica/Analisis Multivariante/2. Analisis de componentes principales/gorriones.RData")
library(gplots)
#convertimos en array los datos
table_eu2<-as.data.frame.array(tabla_eu)
dt <- as.table(as.matrix(table_eu2))
balloonplot(t(dt), main ="Tabla datos EU", xlab ="", ylab="",
label = FALSE, show.margins = FALSE)
#cargamos lso datos
gorriones<-load("C:/Users/Cristopher/Desktop/certificados/UOC/Bioestadistica y Bioinformatica/Analisis Multivariante/2. Analisis de componentes principales/gorriones.RData")
gorriones
#cargamos lso datos
load("C:/Users/Cristopher/Desktop/certificados/UOC/Bioestadistica y Bioinformatica/Analisis Multivariante/2. Analisis de componentes principales/gorriones.RData")
#cargamos lso datos
load("gorriones.RData")
gorriones
#cargamos los datos
load("C:/Users/Cristopher/Desktop/certificados/UOC/Bioestadistica y Bioinformatica/Analisis Multivariante/2. Analisis de componentes principales/gorriones.RData")
gorriones
head(gorriones)
#cargamos los datos
gorriones<-load("C:/Users/Cristopher/Desktop/certificados/UOC/Bioestadistica y Bioinformatica/Analisis Multivariante/2. Analisis de componentes principales/gorriones.RData")
#cargamos los datos
load("C:/Users/Cristopher/Desktop/certificados/UOC/Bioestadistica y Bioinformatica/Analisis Multivariante/2. Analisis de componentes principales/gorriones.RData")
head(gorriones)
gorrionesa<- gorriones[,-6]
colMeans(gorrionesa)
cov(gorrionesa)
gorrionesa_pca <- princomp(x = gorrionesa_pca)
gorrionesa_pca <- princomp(x = gorrionesa)
gorrionesa_pca
print(summary(gorrionesa_pca), loadings = TRUE)
gorrionesa_pca$loadings[,1:5]
USArrests
USArrests
USArrests[,-1]
cor(USArrests)
usa_pca <- princomp(x = USArrests)
print(summary(usa_pca), loadings = TRUE)
usa_pca <- princomp(x = USArrests, cor = TRUE)
print(summary(usa_pca), loadings = TRUE)
usa_pca$loadings[,1:5]
usa_pca$loadings[,1:4]
eigen(cor(USArrests))
eigen(USArrests)
eigen(cor(USArrests))
eigen(cor(gorriones[,-6]))
eigen(cor(gorrionesa))
eigen(cor(gorrionesa_pca))
eigen(cor(gorrionesa))
scale(gorrionesa)
gorrionesa<-scale(gorrionesa)
head(gorrionesa)
cov(gorrionesa)
gorrionesa_pca <- princomp(x = gorrionesa,cor = TRUE)
gorrionesa_pca
print(summary(gorrionesa_pca), loadings = TRUE)
gorrionesa_pca$loadings[,1:5]
(evecs.ei = eigen(cor(gorrionesa))$vectors)       # Using eigen() method
(evecs.svd = svd(gorrionesa)$v)                   # PCA with SVD...
(evecs = prcomp(gorrionesa)$rotation)
(evecs = prcomp(gorrionesa)$rotation)
crimenes.usa<-scale(USArrests)
crimenes.usa<-scale(USArrests)
(evecs.ei = eigen(cor(crimenes.usa))$vectors)       # Using eigen() method
(evecs.svd = svd(crimenes.usa)$v)                   # PCA with SVD...
(evecs = prcomp(crimenes.usa)$rotation)
loaded = evecs %*% diag(prcomp(crimenes.usa)$sdev)
loaded
loaded = evecs %*% diag(prcomp(gorrionesa)$sdev)
loaded = evecs %*% diag(prcomp(gorrionesa_pca)$sdev)
loaded = evecs %*% diag(prcomp(gorrionesa)$sdev)
(evecs.ei = eigen(cor(gorrionesa))$vectors)       # Using eigen() method
(evecs.svd = svd(gorrionesa)$v)                   # PCA with SVD...
(evecs = prcomp(gorrionesa)$rotation)
loaded = evecs %*% diag(prcomp(gorrionesa)$sdev)
loaded
gorrionesa_pca$loadings
gorrionesa_pca$loadings[,1:5]
gorrionesa_pca$scores
gorrionesa_pca$call
gorrionesa_pca$n.obs
gorrionesa_pca$sdev
gorrionesa_pca$loadings
gorrionesa_pca$loadings[,1:5]
gorrionesa_pca$loadings
gorrionesa_pca$loadings[,1:5]
gorrionesa_pca$loadings
(evecs.ei = eigen(cor(gorrionesa))$vectors)       # Using eigen() method
(evecs.svd = svd(gorrionesa)$v)                   # PCA with SVD...
(evecs.ei = eigen(cor(gorrionesa))$vectors)       # Using eigen() method
(evecs = princomp(gorrionesa)$rotation)
princomp(gorrionesa)
pca_gorrionesa<-princomp(gorrionesa)
pca_gorrionesa<-princomp(gorrionesa)
pca_gorrionesa
pca_gorrionesa$loadings
(evecs.ei = eigen(cor(gorrionesa))$vectors)       # Using eigen() method
(evecs.svd = svd(gorrionesa)$v)                   # PCA with SVD...
(evecs = princomp(gorrionesa)$rotation)
pca_gorrionesa<-princomp(gorrionesa)
pca_gorrionesa$loadings
evecs %*% diag(princomp(gorrionesa)$sdev)
evecs %*% diag(pca_gorrionesa)$sdev)
pca_gorrionesa %*% diag(pca_gorrionesa)$sdev)
pca_gorrionesa %*% diag(pca_gorrionesa$sdev)
evecs
(evecs.ei = eigen(cor(gorrionesa))$vectors)       # Using eigen() method
(evecs.svd = svd(gorrionesa)$v)
diag(princomp(gorrionesa)$sdev)
(prcomp(gorrionesa)$rotation)
gorrionesa_pca$loadings[,1:5]
gorrionesa_pca$loadings[,1:5]  %*% diag(princomp(gorrionesa)$sdev)
gorrionesa_pca
gorrionesa_pca$loadings
(prcomp(gorrionesa)$rotation)
gorrionesa_pca$loadings[,1:5]  %*% diag(princomp(gorrionesa)$sdev)
(evecs.ei = eigen(cor(gorrionesa))$vectors)       # Using eigen() method
(evecs.svd = svd(gorrionesa)$v)
gorrionesa_pca$loadings[,1:5]
(evecs.ei = eigen(cor(gorrionesa))$vectors)       # Using eigen() method
(evecs.svd = svd(gorrionesa)$v)
#cargamos las cargas obtenidas anteriormente
gorrionesa_pca$loadings[,1:5]
(vectores_propios = eigen(cor(gorrionesa))$vectors)       # Using eigen() method
(vectores_propios.svd = svd(gorrionesa)$v)
#cargamos las cargas obtenidas anteriormente con princomp()
gorrionesa_pca$loadings[,1:5]
t(cor(gorrionesa))$vectors
(t(cor(gorrionesa))$vectors)
pca_gorrionesa$scores
# SCORES:
(svd(gorrionesa)$u %*% diag(svd(gorrionesa)$d))  # with SVD
# SCORES:
scores<- (svd(gorrionesa)$u %*% diag(svd(gorrionesa)$d))  # with SVD
head(scores)
pca_gorrionesa$loadings
pca_gorrionesa$loadings[,1:5]
pca_gorrionesa$loadings[,1:5] %*% gorrionesa
pca_gorrionesa$loadings[,1:5] %*% gorrionesa
as.matrix(scores)
gorrionesa_pca$loadings[,1:5]
B = gorrionesa_pca$loadings[,1:5]
P = gorrionesa_pca$scores[1:5]
p
P
P = gorrionesa_pca$scores
P
B %*% gorrionesa
B = gorrionesa_pca$loadings
B
B %*% gorrionesa_pca
B = gorrionesa_pca$loadings[,1:5]
scores = gorrionesa %*% prcomp(gorrionesa)$rotation
scores
gorrionesa_pca$loadings
gorrionesa_pca$scores
head(scores)
head(pca_gorrionesa$scores)
prcomp(gorrionesa)$rotation
princomp(gorrionesa,cor = TRUE)
princomp(gorrionesa,cor = TRUE)[,1:5]
princomp(gorrionesa,cor = TRUE)[,1:4]
princomp(gorrionesa)
pca_gorrionesa$loadings
scores = gorrionesa %*% gorrionesa_pca$loadings[,1:5]
head(scores)
head(pca_gorrionesa$scores)
library(gplots)
#convertimos en array los datos
table_eu2<-as.data.frame.array(tabla_eu)
dt <- as.table(as.matrix(table_eu2))
balloonplot(t(dt), main ="Tabla datos EU", xlab ="", ylab="",
label = FALSE, show.margins = FALSE)
gorrionesa
t(gorrionesa)
diag(gorrionesa)
diag(as.matrix(gorrionesa))
sqrt(t(gorrionesa)%*%gorrionesa)
col(gorrionesa)
sqrt(t(gorrionesa)%*%gorrionesa)
sqrt(t(scores)%*%scores)
sqrt(t(scores)%*% scores)
sqrt(t(scores^2)%*% scores^2)
t(gorrionesa)
go<-t(gorrionesa)
det(gorrionesa)
det(gorrionesa, logarithm = TRUE)
eigen(gorrionesa)$value
gorrionesa
eigen(pca_gorrionesa)$value
eigen(gorriones[,-5])$value
eigen(gorrionesa^2)$value
eigen(t(gorrionesa) %*% gorrionesa)$values
t(pca_gorrionesa$scores)
t(pca_gorrionesa$scores)^2
eigen(gorrionesa)$values
eigen(pca_gorrionesa)$values
load("SNP.RData")
load("C:/Users/Cristopher/Desktop/certificados/UOC/Bioestadistica y Bioinformatica/Analisis Multivariante/2. Analisis de componentes principales/SNP.RData")
load("C:/Users/Cristopher/Desktop/certificados/UOC/Bioestadistica y Bioinformatica/Analisis Multivariante/PEC1/SNP.RData")
controls <- rownames(subject.support)[subject.support$cc==0]
pop <- subject.support[controls,"stratum"]
pop.all <- subject.support[,"stratum"]
use <- seq(1, ncol(snps.10), 10)
ctl10 <- snps.10[controls, use]
all10 <- snps.10[,use]
X <- as(ctl10, "numeric")
X.all <- as(all10,"numeric")
x
X
controls
X.all
head(X)
View(X)
mean(X[,1])
mean(controls[,1])
mean(X.all[,1])
str(X)
str(X.all)
str(controls)
mean(controls)
mean(ctl10)
ctl10
ctl10@.Data
ctl10
all10
X
X.all
X.all
xxd <- xxt(ctl.10, correct.for.missing=FALSE)
xxd <- xxt(ctl10, correct.for.missing=FALSE)
xxd
head(xxd)
head(xxd[1:2,1:2])
head(xxd[1:9,1:9])
eigen(xxd)$values
eigen(xxmat, symmetric=TRUE)
eigen(xxd, symmetric=TRUE)
#calculamos los valores propios y vectores propios de la matriz
xxmate <- eigen(xxmat, symmetric=TRUE)
#calculamos los valores propios y vectores propios de la matriz
xxmate <- eigen(xxd, symmetric=TRUE)
xxmate <- eigen(xxd, symmetric=TRUE)
xxmate_vectores <- xxmate$vectors[,1:5]
xxmate_valores <- xxmate$values[1:5]
xxmate_valores
xxmate_vectores
eigen(xxd)$values
xxmate_vectores <- xxmate$vectors
xxmate_valores <- xxmate$values
eigen(xxd)$values
xxmate_valores
head(xxmate_valores)
head(xxmate_vectores)
eigen(xxd)$vectors
head(xxmate_vectores)
head(xxmate_valores[,1:10])
xxmate_valores[,1:10]
pope <- subject.support[controls,"stratum"]
par(mfrow=c(1,2))
boxplot(xxmate_vectores[,1]~pope)
boxplot(xxmate_vectores[,2]~pope)
par(mfrow=c(2,4))
boxplot(xxmate_vectores[,1]~pope)
boxplot(xxmate_vectores[,2]~pope)
boxplot(xxmate_vectores[,2]~pope)
boxplot(xxmate_vectores[,3]~pope)
library(gplots)
#convertimos en array los datos
table_eu2<-as.data.frame.array(tabla_eu)
dt <- as.table(as.matrix(table_eu2))
balloonplot(t(dt), main ="Tabla datos EU", xlab ="", ylab="",
label = FALSE, show.margins = FALSE)
cen.ei = eigen(cor(CEN))$vectors
(evecs = prcomp(xxtrasposicion)$rotation)
data <- X
for(i in 1:ncol(data)){
data[is.na(data[,i]), i] <- mean(data[,i], na.rm = TRUE)
}
x.escalado<-scale(data)
head(x.escalado)
data <- X
for(i in 1:ncol(data)){
data[is.na(data[,i]), i] <- mean(data[,i], na.rm = TRUE)
}
x.escalado<-scale(data)
#head(x.escalado)
# finalmente calculamos la XX'
xxtrasposicion<-x.escalado %*% t(x.escalado)
head(xxtrasposicion[1:6,1:6])
vectores.valores<-eigen(xxtrasposicion)
head(vectores.valores$values)
head(vectores.valores$vectors[1:9,1:9])
par(mfrow=c(2,4))
boxplot(vectores.valores$vectors[,1]~pop)
boxplot(vectores.valores$vectors[,2]~pop)
boxplot(vectores.valores$vectors[,2]~pop)
boxplot(vectores.valores$vectors[,3]~pop)
vectores.valores$values[500]<-0
(evecs = prcomp(xxtrasposicion)$rotation)
eigen(cor(xxtrasposicion))$vectors
vectores.valores$values %*% diag(prcomp(x.escalado)$sdev)
cargas = vectores.valores$values %*% diag(prcomp(x.escalado)$sdev)
cargas = vectores.valores$vectors %*% diag(prcomp(x.escalado)$sdev)
cargas
CEN = prcomp(x.escalado)
CEN$rotation[1:9,1:9]
CEN$x[1:9,1:9]
CEN$x[1:4,1:4]
CEN$sdev[1:4,1:4]
CEN$sdev
prcomp(CEN)$rotation
prcomp(CEN)$rotation
b_cargas <- snp.pre.multiply(x.escalado, diag(1/sqrt(xxmate_valores)) %*% t(xxmate_vectores))
cargas.f = vectores.valores$vectors %*% diag(1/sqrt(xxmate_valores)) %*% t(xxmate_vectores)
cargas.f = vectores.valores$vectors %*% diag(1/sqrt(vectores.valores$values)) %*% t(vectores.valores)
cargas.f = vectores.valores$vectors %*% diag(1/sqrt(vectores.valores$values)) %*% t(vectores.valores$vectors)
cargas.f
cargas.f
cargas.f =  diag(1/sqrt(vectores.valores$values)) %*% t(vectores.valores$vectors)
cargas.f
b_cargas
head(evecs)
head(cargas.f)
head(evecs)
vectores.valores$vectors %*% diag(prcomp(x.escalado)$sdev)
cargas.f =  diag(1/sqrt(vectores.valores$values)) %*% t(vectores.valores$vectors)
head(cargas.f[1:9,1:9])
xxmate_vectores
diag(1/sqrt(xxmate_valores)) %*% t(xxmate_vectores)
cargas.f =  diag(1/sqrt(vectores.valores$values)) %*% t(vectores.valores$vectors)
head(cargas.f[1:9,1:9])
datag <- X.all
for(i in 1:ncol(datag)){
datag[is.na(datag[,i]), i] <- mean(datag[,i], na.rm = TRUE)
}
x.escaladog<-scale(datag)
trasposiciong<-x.escaladog %*% t(x.escaladog)
scoresg = x.escaladog %*% prcomp(x.escaladog)$rotation
scoresg
escaladog[,1]
library(tidyverse)
datag <- X.all
for(i in 1:ncol(datag)){
datag[is.na(datag[,i]), i] <- mean(datag[,i], na.rm = TRUE)
}
escaladog<-scale(datag)
#head(x.escalado)
# finalmente calculamos la XX'
trasposiciong<- escaladog %*% t(x.escaladog)
trasposiciong = eigen(trasposiciong)
escaladog[,1]
trasposiciong$vectors[,1:2]
trasposiciong %*% vectores.valores$vectors[,1]
trasposiciong[,1] %*% vectores.valores$vectors[,1]
trasposiciong[,1] %*% vectores.valores$vectors[,2]
cargas.f[,1]
trasposiciong[,1] %*% cargas.f[,1]
trasposiciong$values[,1] %*% cargas.f[,1]
trasposiciong$values %*% cargas.f[,1]
trasposiciong$values[,1] %*% cargas.f[,1]
trasposiciong[,1] %*% cargas.f[,1]
escaladog[,1] %*% cargas.f[,1]
escaladog %*% cargas.f[,1]
as.matrix(escaladog) %*% cargas.f[,1]
46.6 + 39.5
du
table_eu2<-as.data.frame.array(tabla_eu)
dt <- as.table(as.matrix(table_eu2))
balloonplot(t(dt), main ="Tabla datos EU", xlab ="", ylab="",
label = FALSE, show.margins = FALSE)
library(gplots)
#convertimos en array los datos
table_eu2<-as.data.frame.array(tabla_eu)
dt <- as.table(as.matrix(table_eu2))
balloonplot(t(dt), main ="Tabla datos EU", xlab ="", ylab="",
label = FALSE, show.margins = FALSE)
library(gplots)
#convertimos en array los datos
table_eu2<-as.data.frame.array(tabla_eu)
dt <- as.table(as.matrix(table_eu2))
balloonplot(t(dt), main ="Tabla datos ", xlab ="", ylab="",
label = FALSE, show.margins = FALSE)
proce$mean
summary(proce)
proce <- procrustes(nmds.meta1,nmds.meta2)
library(vegan)
proce <- procrustes(nmds.meta1,nmds.meta2)
plot(proce)
plot.nmds2<-as.data.frame(nmds.meta2$points)
plot.nmds2$sex = monkeys$sex
p2 <- ggplot(plot.nmds2, aes(plot.nmds2$MDS1, plot.nmds2$MDS2)) +
geom_point(color = 'red') +
theme_classic(base_size = 10)
library(tidyverse)
library(ggrepel)
plot.nmds2<-as.data.frame(nmds.meta2$points)
plot.nmds2$sex = monkeys$sex
p2 <- ggplot(plot.nmds2, aes(plot.nmds2$MDS1, plot.nmds2$MDS2)) +
geom_point(color = 'red') +
theme_classic(base_size = 10)
p2 + geom_label_repel(aes(label = rownames(plot.nmds2),
fill = factor(plot.nmds2$sex)), color = 'white',
size = 3.5) +
theme(legend.position = "bottom")
proce$svd
proce$X
proce$Yrot
proce$RSS
proce$ss
proce$translation
proce$rotation
proce$Yrot
t(proce$X) - proce$Yrot
trasposiciong[,1] %*% vectores.valores$vectors[,2]
as.matrix(escaladog) %*% cargas.f[,1]
escaladog<-scale(datag)
class(escaladog)
as.matrix(escaladog)
#head(x.escalado)
escaladog = as.matrix(escaladog)
class(escaladog)
as.matrix(escaladog) %*% cargas.f[,1]
as.matrix(escaladog) %*% cargas.f[,1]
as.matrix(escaladog) %*% cargas.f
as.matrix(escaladog) %*% cargas.f
as.matrix(escaladog) %*% cargas.f
as.matrix(escaladog) %*% cargas.f
f<-scale(X.all, center=T, scale=F) %*% cargas.f
library(tidyverse)
f<-scale(X.all, center=T, scale=F) %*% cargas.f
cargas.f
t(cargas.f)
matrix(cargas.f)
as.matrix(escaladog) %*% as.matrix(cargas.f)
prcomp(trasposiciong)
prcomp(as.matrix(trasposiciong))
prcomp(escaladog)
#head(x.escalado)
ftrasposicion<- escaladog %*% t(escaladog)
vectores.valoresf<-eigen(ftrasposicion)
fcomponent<-prcomp(ftrasposicion)
plot(fcomponent$x)
plot(fcomponent$x, col = fcomponent$x)
